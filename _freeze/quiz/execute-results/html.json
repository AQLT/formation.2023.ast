{
  "hash": "471f8caa3492d6a587286f902b66b842",
  "result": {
    "markdown": "<!-- --- -->\n<!-- title: \"Analyse des séries temporelles avec R\" -->\n<!-- format: docx -->\n<!-- output-file: \"Analyse des séries temporelles avec R\" -->\n<!-- echo: false -->\n<!-- --- -->\n\n\n::: {#exr-def-st}\nUne série temporelle est un processus stochastique, dont on n'observe qu'une réalisation.\n\n**A. Vrai**\n\nB. Faux\n:::\n\n::: {#exr-err-dplyr-lag}\nQue va donner le code suivant :\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(stats)\nlag(AirPassengers)\n```\n:::\n\n\n**A. Une erreur car le chargement du package `dplyr` masque la fonction `stats::lag`**\n\nB. Ma série retardée car j'ai chargé le package `stats` après le package `dplyr`\n:::\n\n::: {#exr-lag-diff}\nJe souhaite calculer la série différenciée à l'ordre 12 et la série retardée de 1 mois de la série `AirPassengers`.\nQuelles fonctions faut-il utiliser ?\n\nA. `stats::diff(AirPassengers, 12)` et `stats::lag(AirPassengers, 1)`\n\nB. `stats::diff(AirPassengers, -12)` et `stats::lag(AirPassengers, 1)`\n\n**C. `stats::diff(AirPassengers, 12)` et `stats::lag(AirPassengers, -1)`**\n\nD. `stats::diff(AirPassengers, -12)` et `stats::lag(AirPassengers, -1)`\n:::\n\n::: {#exr-tsibble}\nQuel package permet de manipuler des séries temporelles avec le language du `tidyverse` .\n\nA. `stats`\n\nB. `xts`\n\nC. `stats`\n\n**D. `tsibble`**\n:::\n\n::: {#exr-autocor}\nÀ quel autocorrélogramme est associé à la série suivante ?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](quiz_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](quiz_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::\n\n\nA. Image A\n\nB. Image B\n\n**C. Image C**\n\nD. Image D\n:::\n\n\n\n::: {#exr-perod-bb}\nÀ quelle composante est associé le périodogramme suivant :\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\ns <- ts(cos(2*pi/12*(1:100)) + sin(2*pi/12*(1:100)), frequency = 12, start = 2000)\nspectrum(s, \n         detrend = FALSE,\n         method = \"pgram\", log = \"no\")\n```\n\n::: {.cell-output-display}\n![](quiz_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nA. Tendance\n\nB. Cycle\n\n**C. Saisonnalité**\n\nD. Irrégulier\n:::\n\n::: {#exr-perod-bb}\nÀ quelle composante est associé le périodogramme suivant :\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\ni = ts(rnorm(100), frequency = 12, start = 2000)\nspectrum(i, \n         detrend = FALSE,\n         method = \"pgram\", log = \"no\")\n```\n\n::: {.cell-output-display}\n![](quiz_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nA. Tendance\n\nB. Cycle\n\nC. Saisonnalité\n\n**D. Irrégulier**\n:::\n\n::: {#exr-bx}\nLa transformation de Box-Cox est-elle adaptée à la série suivante ?\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forecast, quietly = FALSE, warn.conflicts = FALSE)\nforecast::autoplot(expsmooth::cangas, ylab = NULL)\n```\n\n::: {.cell-output-display}\n![](quiz_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nA. Oui\n\nB. Oui mais seulement avant 1972\n\n**C. Non**\n:::\n\n::: {#exr-}\nEst-ce que je peux directement utiliser la fonction `stl()` pour désaisonnaliser cette série ?\n\n::: {.cell}\n\n```{.r .cell-code}\nforecast::autoplot(AirPassengers)\n```\n\n::: {.cell-output-display}\n![](quiz_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n**A. Non car le saisonnalité est multiplicative**\n\nB. Oui car `stl()` détecte la type de saisonnalité\n:::\n\n::: {#exr-cours-cac-40}\nQuel modèle peut-on utiliser pour prévoir le cours de clôture du CAC 40 ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny = window(EuStockMarkets[,\"CAC\"], start = 1998)\nautoplot(y, y = \"Niveau\",\n         main  = \"Cours de clôture du CAC 40\")\n```\n\n::: {.cell-output-display}\n![](quiz_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nA. Moyenne des valeurs passées\n\n**B. Dernière date connue**\n\nC. Valeur de l'année passée\n:::\n\n\n::: {#exr-ets-co2}\nQuel modèle est retenu pour cette série ?\n\n::: {.cell}\n\n```{.r .cell-code}\nforecast::ets(co2, damped = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nETS(M,A,A) \n\nCall:\n forecast::ets(y = co2, damped = FALSE) \n\n  Smoothing parameters:\n    alpha = 0.5995 \n    beta  = 0.0065 \n    gamma = 0.129 \n\n  Initial states:\n    l = 315.2927 \n    b = 0.0772 \n    s = -0.8309 -1.8609 -3.0483 -2.782 -1.2615 0.7793\n           2.1909 2.7066 2.1724 1.2282 0.6624 0.0439\n\n  sigma:  9e-04\n\n     AIC     AICc      BIC \n1748.989 1750.349 1819.513 \n```\n:::\n:::\n\nA. Tendance multiplicative, Saisonnalité additive, bruit additif\n\nB. Tendance additive, Saisonnalité multiplicative, bruit additif\n\n**C. Tendance additive, Saisonnalité additive, bruit multiplicatif**\n:::\n\n::: {#exr-cours-cac-40-arima}\nQuel modèle ARIMA parait plausible pour modéliser le cours de clôture du CAC 40 ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny = window(EuStockMarkets[,\"CAC\"], start = 1998)\nautoplot(y, y = \"Niveau\",\n         main  = \"Cours de clôture du CAC 40\")\n```\n\n::: {.cell-output-display}\n![](quiz_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nA. ARIMA(1,0,0)\n\nB. ARIMA(1,0,1)\n\nC. ARIMA(0,0,1)\n\n**D. ARIMA(0,1,0)**\n:::\n\n::: {#exr-cours-tend-diff}\nSi une série comporte une tendance linéaire et une saisonnalité mensuelle, quelle différenciation faut-il faire ?\n\nA. Régulière : $X_t - X_{t-1}$\n\n**B. Saisonnière : $X_t - X_{t-12}$**\n\nC. Saisonnière et régulière.\n:::\n\n::: {#exr-series-journ}\nSur des séries journalières, quelle méthode privilégier pour prendre en compte la saisonnalité ?\n\nA. En ajoutant des indicatrices\n\nB. En différenciant la série\n\n**C. En ajoutant des régresseurs de Fourier**\n\nD. Toutes ces méthodes\n\n:::\n\n\n::: {#exr-qual-aic}\nPour comparer la qualité prédictive d'un modèle exponentiel et d'un modèle ARIMA, je peux utiliser l'AIC.\n\nA. Vrai\n\n**B. Faux**\n:::\n",
    "supporting": [
      "quiz_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}