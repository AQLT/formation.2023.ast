{
  "hash": "137f8b171458d04b112223b6d6770b1b",
  "result": {
    "markdown": "---\ntitle: \"1 - Rappels sur l’environnement de travail de R\"\n---\n\n\n\n\n### {{< fa brands r-project >}}\n\n{{< fa brands r-project >}} : Logiciel statistique\n\nRStudio : IDE le plus connu\n\nCRAN : Plateforme centralisant un ensemble de packages R sous un format normalisé permettant une installation facile\n\nGitHub : Plateforme de partage de code où l'on retrouve de nombreux packages en développement\n\n\n### Aide\n\n- Si vous ne connaissez pas les fonctions, Google est votre ami\n\n- Sinon `help(ma_fonction)` ou `?ma_fonction` pour chercher l'aide associée à `ma_fonction`. Voir aussi vignettes (documentation long format). Exemple :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pour voir l'ensemble des vignettes du package grid\nvignette(package = \"grid\")\n# Pour afficher une vignette en utilisant son nom\nvignette(\"moveline\", package = \"grid\")\n```\n:::\n\n\n- Cran Task Views (https://cran.r-project.org/web/views/) regroupement de packages selon des thèmes particuliers. Exemple pour ce cours :\nhttps://cran.r-project.org/web/views/TimeSeries.html\n\n\n# Les types de base\n\n## Les vecteurs\n\n### Les vecteurs {.allowframebreaks}\n\nLes vecteurs sont les objets les plus simples : créés avec fonction `c()` et leurs éléments peuvent être manipulés avec l'opérateur `[`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- c(1, 2, 3); v2 <- c(\"a\", \"b\")\nv1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\nv2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"b\"\n```\n:::\n\n```{.r .cell-code}\n# v1 peut aussi se créer de façon équivalente avec :\n1:3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\n# Pour concaténer deux vecteurs, notez le changement de type\nv3 <- c(v1, v2)\nv3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\" \"3\" \"a\" \"b\"\n```\n:::\n\n```{.r .cell-code}\nv3[c(4, 1)] # 4e puis 1er élément\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"1\"\n```\n:::\n\n```{.r .cell-code}\nv3[-c(4, 1)] # on enlève 1er et 4e éléments\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2\" \"3\" \"b\"\n```\n:::\n\n```{.r .cell-code}\n# Les éléments peuvent également être nommés\nv4 <- c(elem1 = 1, elem2 = 2, 4)\nv4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nelem1 elem2       \n    1     2     4 \n```\n:::\n\n```{.r .cell-code}\nnames(v4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"elem1\" \"elem2\" \"\"     \n```\n:::\n\n```{.r .cell-code}\nnames(v4)[1] <- \"toto\"\nv4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n toto elem2       \n    1     2     4 \n```\n:::\n\n```{.r .cell-code}\nv4[c(\"toto\", \"elem2\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n toto elem2 \n    1     2 \n```\n:::\n:::\n\n\n\n## Les matrices\n\n### Les matrices {.allowframebreaks}\n\nMatrices : vecteurs à deux dimensions créés avec fonction `matrix()`\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <- matrix(1:12, ncol = 3); m2 <- matrix(1:12, nrow = 3)\nm1; t(m1); m1 * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    5    6    7    8\n[3,]    9   10   11   12\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    2   10   18\n[2,]    4   12   20\n[3,]    6   14   22\n[4,]    8   16   24\n```\n:::\n\n```{.r .cell-code}\nm1 %*% m2 # multiplication matricielle\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]   38   83  128  173\n[2,]   44   98  152  206\n[3,]   50  113  176  239\n[4,]   56  128  200  272\n```\n:::\n\n```{.r .cell-code}\nm1[, 1] # 1ere colonne : c'est un vecteur\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4\n```\n:::\n\n```{.r .cell-code}\nm1[-2, ] # Tout sauf 2ème ligne\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    3    7   11\n[3,]    4    8   12\n```\n:::\n\n```{.r .cell-code}\n# Nombre de lignes et de colonnes :\nnrow(m1); ncol(m1); dim(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 3\n```\n:::\n\n```{.r .cell-code}\n# De la même façon que pour les vecteurs on peut nommer lignes/colonnes\ncolnames(m1) <- paste0(\"col\", 1:ncol(m1))\nrownames(m1) <- paste0(\"row\", 1:nrow(m1))\nm1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     col1 col2 col3\nrow1    1    5    9\nrow2    2    6   10\nrow3    3    7   11\nrow4    4    8   12\n```\n:::\n\n```{.r .cell-code}\nm1[, \"col2\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nrow1 row2 row3 row4 \n   5    6    7    8 \n```\n:::\n\n```{.r .cell-code}\n# Pour combiner des matrices, on peut utiliser cbind et rbind:\ncbind(m1, 1:4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     col1 col2 col3  \nrow1    1    5    9 1\nrow2    2    6   10 2\nrow3    3    7   11 3\nrow4    4    8   12 4\n```\n:::\n\n```{.r .cell-code}\nrbind(m1, m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     col1 col2 col3\nrow1    1    5    9\nrow2    2    6   10\nrow3    3    7   11\nrow4    4    8   12\nrow1    1    5    9\nrow2    2    6   10\nrow3    3    7   11\nrow4    4    8   12\n```\n:::\n:::\n\nOn peut utiliser la fonction `apply` pour appliquer une fonction à toutes les lignes ou toutes les colonnes. Exemple :\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(m1, 1, sum) # somme sur toutes les lignes (dimension 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nrow1 row2 row3 row4 \n  15   18   21   24 \n```\n:::\n\n```{.r .cell-code}\napply(m1, 2, sum) # somme sur toutes les colonnes (dimension 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncol1 col2 col3 \n  10   26   42 \n```\n:::\n:::\n\n\n## Les listes\n\n### Les listes {.allowframebreaks}\n\nUne liste peut contenir tout type d'objet\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1 <- list(v1, m1, v4); l1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1 2 3\n\n[[2]]\n     col1 col2 col3\nrow1    1    5    9\nrow2    2    6   10\nrow3    3    7   11\nrow4    4    8   12\n\n[[3]]\n toto elem2       \n    1     2     4 \n```\n:::\n\n```{.r .cell-code}\nlength(l1) # nombre d'éléments d'une liste\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n# On peut encore nommer les éléments de la liste :\nnames(l1) <- c(\"vect1\", \"mat\", \"vect2\")\nl1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$vect1\n[1] 1 2 3\n\n$mat\n     col1 col2 col3\nrow1    1    5    9\nrow2    2    6   10\nrow3    3    7   11\nrow4    4    8   12\n\n$vect2\n toto elem2       \n    1     2     4 \n```\n:::\n\n```{.r .cell-code}\n# Pour accéder à un élément d'une liste utiliser [[,\n# autrement on a encore une liste\nl1[1] # liste d'un seul élément : v1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$vect1\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\nl1[[1]] # premier élément de la liste\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\n# On concatène deux listes avec fonction c:\nc(l1, l1[-2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$vect1\n[1] 1 2 3\n\n$mat\n     col1 col2 col3\nrow1    1    5    9\nrow2    2    6   10\nrow3    3    7   11\nrow4    4    8   12\n\n$vect2\n toto elem2       \n    1     2     4 \n\n$vect1\n[1] 1 2 3\n\n$vect2\n toto elem2       \n    1     2     4 \n```\n:::\n:::\n\n\n\n## Le data.frame et tibble\n\n### Le data.frame {.allowframebreaks}\n\nEntre les listes et matrices : comme un tableur, souvent utilisé pour stocker des données\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd1 <- data.frame(col1 = c(\"a\", \"b\", \"c\"), col2 = 1:3)\nd1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  col1 col2\n1    a    1\n2    b    2\n3    c    3\n```\n:::\n:::\n\n\n### Le tibble  {.allowframebreaks}\n\n`tibble` : comme un data.frame réinventé, plus permissif\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\nt1 <- tibble(col1 = c(\"a\", \"b\", \"c\"), col2 = 1:3)\nt1 # ou as.tibble(d1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  col1   col2\n  <chr> <int>\n1 a         1\n2 b         2\n3 c         3\n```\n:::\n\n```{.r .cell-code}\n# On peut aussi les définir ligne par ligne :\ntribble(\n  ~col1, ~col2,\n  \"a\", 1,\n  \"b\", 2,\n  \"c\", 3\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  col1   col2\n  <chr> <dbl>\n1 a         1\n2 b         2\n3 c         3\n```\n:::\n:::\n\n\n\n# Importation des données\n\n### Importer des données\n\nSoyez fainéants et commencez par utiliser l'interface de RStudio (Environnement > Import Dataset).\n\n\n# Les séries temporelles\n\n### `ts()` \n\nIl existe de nombreux formats pour gérer les séries temporelles. Dans cette formation nous verrons :\n\n- `ts()` : format de base R simple à utiliser mais des difficultés à gérer les fréquences non-entières (journalières, hebdomadaires, etc.)\n\n- `tsibble()` : inspiré du `tidyverse` (`tidyverts` https://tidyverts.org) mais pour la gestion des séries temporelles\n\n### `ts()` {.allowframebreaks}\n\nOn peut créer un objet avec la fonction `ts(data = ., start = ., frequency = .)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = ts(c(1:12), start = 2020, frequency = 4)\nx; class(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Qtr1 Qtr2 Qtr3 Qtr4\n2020    1    2    3    4\n2021    5    6    7    8\n2022    9   10   11   12\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ts\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmts <- ts(matrix(rnorm(30), 10, 3), start = c(1961, 1),\n\t\t  frequency = 12)\nmts; class(mts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Series 1    Series 2    Series 3\nJan 1961 -0.6264538  1.51178117  0.91897737\nFeb 1961  0.1836433  0.38984324  0.78213630\nMar 1961 -0.8356286 -0.62124058  0.07456498\nApr 1961  1.5952808 -2.21469989 -1.98935170\nMay 1961  0.3295078  1.12493092  0.61982575\nJun 1961 -0.8204684 -0.04493361 -0.05612874\nJul 1961  0.4874291 -0.01619026 -0.15579551\nAug 1961  0.7383247  0.94383621 -1.47075238\nSep 1961  0.5757814  0.82122120 -0.47815006\nOct 1961 -0.3053884  0.59390132  0.41794156\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"mts\"    \"ts\"     \"matrix\"\n```\n:::\n:::\n\n\nPour manipulations : voir TP\n\n### `tsibble` {.allowframebreaks}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tsibble)\ntsibbledata::aus_production\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 218 x 7 [1Q]\n   Quarter  Beer Tobacco Bricks Cement Electricity   Gas\n     <qtr> <dbl>   <dbl>  <dbl>  <dbl>       <dbl> <dbl>\n 1 1956 Q1   284    5225    189    465        3923     5\n 2 1956 Q2   213    5178    204    532        4436     6\n 3 1956 Q3   227    5297    208    561        4806     7\n 4 1956 Q4   308    5681    197    570        4418     6\n 5 1957 Q1   262    5577    187    529        4339     5\n 6 1957 Q2   228    5651    214    604        4811     7\n 7 1957 Q3   236    5317    227    603        5259     7\n 8 1957 Q4   320    6152    222    582        4735     6\n 9 1958 Q1   272    5758    199    554        4608     5\n10 1958 Q2   233    5641    229    620        5196     7\n# i 208 more rows\n```\n:::\n\n```{.r .cell-code}\ntsibbledata::global_economy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 15,150 x 9 [1Y]\n# Key:       Country [263]\n   Country     Code   Year         GDP Growth   CPI Imports Exports Population\n   <fct>       <fct> <dbl>       <dbl>  <dbl> <dbl>   <dbl>   <dbl>      <dbl>\n 1 Afghanistan AFG    1960  537777811.     NA    NA    7.02    4.13    8996351\n 2 Afghanistan AFG    1961  548888896.     NA    NA    8.10    4.45    9166764\n 3 Afghanistan AFG    1962  546666678.     NA    NA    9.35    4.88    9345868\n 4 Afghanistan AFG    1963  751111191.     NA    NA   16.9     9.17    9533954\n 5 Afghanistan AFG    1964  800000044.     NA    NA   18.1     8.89    9731361\n 6 Afghanistan AFG    1965 1006666638.     NA    NA   21.4    11.3     9938414\n 7 Afghanistan AFG    1966 1399999967.     NA    NA   18.6     8.57   10152331\n 8 Afghanistan AFG    1967 1673333418.     NA    NA   14.2     6.77   10372630\n 9 Afghanistan AFG    1968 1373333367.     NA    NA   15.2     8.90   10604346\n10 Afghanistan AFG    1969 1408888922.     NA    NA   15.0    10.1    10854428\n# i 15,140 more rows\n```\n:::\n\n```{.r .cell-code}\nas_tsibble(mts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 30 x 3 [1M]\n# Key:       key [3]\n      index key       value\n      <mth> <chr>     <dbl>\n 1 1961 Jan Series 1 -0.626\n 2 1961 Feb Series 1  0.184\n 3 1961 Mar Series 1 -0.836\n 4 1961 Apr Series 1  1.60 \n 5 1961 May Series 1  0.330\n 6 1961 Jun Series 1 -0.820\n 7 1961 Jul Series 1  0.487\n 8 1961 Aug Series 1  0.738\n 9 1961 Sep Series 1  0.576\n10 1961 Oct Series 1 -0.305\n# i 20 more rows\n```\n:::\n:::\n\nS'adapte assez bien au tidyverse : `index_by()` remplace le `group_by()` mais sur les dates, `group_by_key()` permet de le faire sur les clefs:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nas_tsibble(mts) %>%  \n\tindex_by() %>% \n\tsummarise(moy = mean(value))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 10 x 2 [1M]\n      index     moy\n      <mth>   <dbl>\n 1 1961 Jan  0.601 \n 2 1961 Feb  0.452 \n 3 1961 Mar -0.461 \n 4 1961 Apr -0.870 \n 5 1961 May  0.691 \n 6 1961 Jun -0.307 \n 7 1961 Jul  0.105 \n 8 1961 Aug  0.0705\n 9 1961 Sep  0.306 \n10 1961 Oct  0.235 \n```\n:::\n\n```{.r .cell-code}\nas_tsibble(mts) %>%  \n\t# index_by() %>% \n\tsummarise(moy = mean(value))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 10 x 2 [1M]\n      index     moy\n      <mth>   <dbl>\n 1 1961 Jan  0.601 \n 2 1961 Feb  0.452 \n 3 1961 Mar -0.461 \n 4 1961 Apr -0.870 \n 5 1961 May  0.691 \n 6 1961 Jun -0.307 \n 7 1961 Jul  0.105 \n 8 1961 Aug  0.0705\n 9 1961 Sep  0.306 \n10 1961 Oct  0.235 \n```\n:::\n\n```{.r .cell-code}\nas_tsibble(mts) %>%  \n\tindex_by(date = ~ yearquarter(.)) %>% \n\tsummarise(moy = mean(value))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 4 x 2 [1Q]\n     date    moy\n    <qtr>  <dbl>\n1 1961 Q1  0.198\n2 1961 Q2 -0.162\n3 1961 Q3  0.161\n4 1961 Q4  0.235\n```\n:::\n\n```{.r .cell-code}\nas_tsibble(mts) %>%  \n\tgroup_by_key() %>% \n\tsummarise(moy = mean(value))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 30 x 3 [1M]\n# Key:       key [3]\n   key         index    moy\n   <chr>       <mth>  <dbl>\n 1 Series 1 1961 Jan -0.626\n 2 Series 1 1961 Feb  0.184\n 3 Series 1 1961 Mar -0.836\n 4 Series 1 1961 Apr  1.60 \n 5 Series 1 1961 May  0.330\n 6 Series 1 1961 Jun -0.820\n 7 Series 1 1961 Jul  0.487\n 8 Series 1 1961 Aug  0.738\n 9 Series 1 1961 Sep  0.576\n10 Series 1 1961 Oct -0.305\n# i 20 more rows\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}